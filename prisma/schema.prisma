datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum OwnershipRole {
  PRIMARY
  OWNER
  CARETAKER
}

enum BookingStatus {
  pending
  approved
  rejected
  cancelled
}

enum BookingVoteChoice {
  approve
  reject
  abstain
}

enum ExpenseStatus {
  pending
  approved
  reimbursed
  rejected
}

enum ExpenseApprovalChoice {
  approve
  reject
  abstain
}

enum BookingParticipantRole {
  OWNER
  FAMILY
  GUEST
  CARETAKER
  SERVICE
}

enum BookingTimelineEventType {
  request_created
  request_updated
  vote_cast
  status_changed
  auto_action
  note
}

enum BookingApprovalStrategy {
  majority_share
  supermajority_share
  unanimous
  simple_majority
  custom
}

enum MembershipRole {
  OWNER_ADMIN
  OWNER
  GUEST_VIEWER
}

enum PropertyMembershipRole {
  OWNER
  MANAGER
  VIEWER
}

enum InviteStatus {
  PENDING
  CLAIMED
  REVOKED
}

model OwnerProfile {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  firstName    String
  lastName     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String?       @unique @db.Uuid
  ownerships   Ownership[]
  bookingVotes BookingVote[]
  user         User?         @relation(fields: [userId], references: [id])
  memberships  Membership[]
  invites      Invite[]
}

model User {
  id        String         @id @db.Uuid
  email     String         @unique
  firstName String?
  lastName  String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  organizationMemberships OrganizationMembership[]
  memberships Membership[]
  owners    OwnerProfile[]
  requestedBookings Booking[] @relation("BookingRequestor")
  bookingParticipants BookingParticipant[]
  bookingTimelineEvents BookingTimelineEvent[]
  blogArticles BlogArticle[]
}

model Organization {
  id        Int           @id @default(autoincrement())
  name      String
  slug      String        @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  memberships OrganizationMembership[]
  properties  Property[]
}

model OrganizationMembership {
  id             Int             @id @default(autoincrement())
  userId         String         @db.Uuid
  organizationId Int
  role           MembershipRole  @default(OWNER)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  user           User            @relation(fields: [userId], references: [id])
  organization   Organization    @relation(fields: [organizationId], references: [id])

  @@unique([userId, organizationId])
}

model Ownership {
  id           Int           @id @default(autoincrement())
  propertyId   Int
  ownerProfileId      Int
  role         OwnershipRole @default(OWNER)
  shareBps     Int           @default(0) // 10000 = 100%
  votingPower  Int           @default(1)
  bookingApprover Boolean    @default(true)
  expenseApprover Boolean    @default(true)
  blackoutManager Boolean    @default(false)
  autoSkipBookings Boolean   @default(false)
  notifyOnBookings Boolean   @default(true)
  notifyOnExpenses Boolean   @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  property     Property      @relation(fields: [propertyId], references: [id])
  ownerProfile        OwnerProfile         @relation(fields: [ownerProfileId], references: [id])
  bookingVotes BookingVote[]
  Booking      Booking[]
  expenseApprovals ExpenseApproval[]
  expenseAllocations ExpenseAllocation[]
  createdExpenses Expense[] @relation("ExpenseCreatedBy")
  paidExpenses    Expense[] @relation("ExpensePaidBy")
  guestInvites   GuestInvite[] @relation("OwnershipGuestInvites")
  timelineEvents BookingTimelineEvent[] @relation("BookingTimelineActor")
  requestedBookings Booking[] @relation("BookingRequestorOwnership")
  bookingParticipants BookingParticipant[]

  @@unique([propertyId, ownerProfileId])
}

model Property {
  id             Int           @id @default(autoincrement())
  name           String
  slug           String        @unique
  location       String?
  beds           Int?
  baths          Int?
  description    String?
  nightlyRate    Int // in cents
  cleaningFee    Int // in cents
  minNights      Int           @default(2)
  approvalPolicy String        @default("majority")
  photos         Json? // array of image URLs, e.g., ["https://...","https://..."]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  bookings       Booking[]
  blackouts      Blackout[]
  seasonPrices   SeasonPrice[]
  ownerships     Ownership[]
  expenses       Expense[]
  guestInvites   GuestInvite[]
  bookingsPolicy BookingPolicy?
  bookingUsageSnapshots BookingUsageSnapshot[]
  invites        Invite[]
  organizationId Int?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  memberships    Membership[]
}

model Booking {
  id                   Int           @id @default(autoincrement())
  propertyId           Int
  createdByOwnershipId Int?
  requestorUserId      String?       @db.Uuid
  requestorOwnershipId Int?
  startDate            DateTime
  endDate              DateTime
  guestName            String?
  guestEmail           String?
  status               BookingStatus @default(pending)
  decisionSummary      String?
  requestNotes         String?
  totalAmount          Int // in cents
  policySnapshot       Json?
  submittedAt          DateTime?      @default(now())
  decisionAt           DateTime?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  property             Property      @relation(fields: [propertyId], references: [id])
  createdByOwnership   Ownership?    @relation(fields: [createdByOwnershipId], references: [id])
  requestorOwnership   Ownership?    @relation("BookingRequestorOwnership", fields: [requestorOwnershipId], references: [id])
  requestor            User?         @relation("BookingRequestor", fields: [requestorUserId], references: [id])
  votes                BookingVote[]
  participants         BookingParticipant[]
  timeline             BookingTimelineEvent[]
  usageSnapshots       BookingUsageSnapshot[]
}

model BookingVote {
  id              Int               @id @default(autoincrement())
  bookingId       Int
  ownershipId     Int
  choice          BookingVoteChoice @default(abstain)
  rationale       String?
  createdAt       DateTime          @default(now())
  booking         Booking           @relation(fields: [bookingId], references: [id])
  ownership       Ownership         @relation(fields: [ownershipId], references: [id])
  ownerProfile    OwnerProfile?     @relation(fields: [ownerProfileId], references: [id])
  ownerProfileId  Int?

  @@unique([bookingId, ownershipId])
}

model Membership {
  id             Int                    @id @default(autoincrement())
  ownerProfileId Int
  propertyId     Int
  userId         String?                @db.Uuid
  role           PropertyMembershipRole @default(OWNER)
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  ownerProfile   OwnerProfile           @relation(fields: [ownerProfileId], references: [id])
  property       Property               @relation(fields: [propertyId], references: [id])
  user           User?                  @relation(fields: [userId], references: [id])

  @@unique([ownerProfileId, propertyId])
  @@unique([userId, propertyId])
}

model Invite {
  id             Int           @id @default(autoincrement())
  propertyId     Int
  ownerProfileId Int
  token          String        @unique
  status         InviteStatus  @default(PENDING)
  createdAt      DateTime      @default(now())
  claimedAt      DateTime?
  expiresAt      DateTime?
  property       Property      @relation(fields: [propertyId], references: [id])
  ownerProfile   OwnerProfile  @relation(fields: [ownerProfileId], references: [id])

  @@index([ownerProfileId, propertyId])
}

model BookingParticipant {
  id             Int                    @id @default(autoincrement())
  bookingId      Int
  role           BookingParticipantRole
  userId         String?                @db.Uuid
  ownershipId    Int?
  displayName    String
  email          String?
  nights         Int?                   @default(0)
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  booking        Booking                @relation(fields: [bookingId], references: [id])
  user           User?                  @relation(fields: [userId], references: [id])
  ownership      Ownership?             @relation(fields: [ownershipId], references: [id])

  @@index([bookingId])
}

model BookingTimelineEvent {
  id               Int                      @id @default(autoincrement())
  bookingId        Int
  eventType        BookingTimelineEventType
  message          String?
  payload          Json?
  actorUserId      String?                  @db.Uuid
  actorOwnershipId Int?
  createdAt        DateTime                 @default(now())
  booking          Booking                  @relation(fields: [bookingId], references: [id])
  actorOwnership   Ownership?               @relation("BookingTimelineActor", fields: [actorOwnershipId], references: [id])
  actorUser        User?                    @relation(fields: [actorUserId], references: [id])

  @@index([bookingId])
}

model BookingPolicy {
  id                    Int                     @id @default(autoincrement())
  propertyId            Int                     @unique
  strategy              BookingApprovalStrategy @default(majority_share)
  requiredShareBps      Int?
  quorumShareBps        Int?
  autoApproveAfterHours Int?
  autoRejectAfterHours  Int?
  allowGuestRequests    Boolean                 @default(true)
  requireOwnerPresence  Boolean                 @default(false)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  property              Property                @relation(fields: [propertyId], references: [id])
}

model BookingUsageSnapshot {
  id              Int                    @id @default(autoincrement())
  propertyId      Int
  bookingId       Int?
  participantRole BookingParticipantRole
  participantKey  String
  season          String
  nights          Int                     @default(0)
  calculatedAt    DateTime                @default(now())
  booking         Booking?                @relation(fields: [bookingId], references: [id])
  property        Property                @relation(fields: [propertyId], references: [id])

  @@index([propertyId, season])
  @@index([participantKey, season])
}

model Expense {
  id                   Int            @id @default(autoincrement())
  propertyId           Int
  createdByOwnershipId Int?
  paidByOwnershipId    Int?
  vendorName           String?
  category             String?
  memo                 String?
  amountCents          Int
  incurredOn           DateTime
  status               ExpenseStatus   @default(pending)
  receiptUrl           String?
  decisionSummary      String?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  property             Property        @relation(fields: [propertyId], references: [id])
  createdByOwnership   Ownership?      @relation("ExpenseCreatedBy", fields: [createdByOwnershipId], references: [id])
  paidByOwnership      Ownership?      @relation("ExpensePaidBy", fields: [paidByOwnershipId], references: [id])
  approvals            ExpenseApproval[]
  allocations          ExpenseAllocation[]
}

model ExpenseApproval {
  id          Int                     @id @default(autoincrement())
  expenseId   Int
  ownershipId Int
  choice      ExpenseApprovalChoice   @default(abstain)
  rationale   String?
  createdAt   DateTime                @default(now())
  expense     Expense                 @relation(fields: [expenseId], references: [id])
  ownership   Ownership               @relation(fields: [ownershipId], references: [id])

  @@unique([expenseId, ownershipId])
}

model ExpenseAllocation {
  id          Int        @id @default(autoincrement())
  expenseId   Int
  ownershipId Int
  amountCents Int
  createdAt   DateTime   @default(now())
  expense     Expense    @relation(fields: [expenseId], references: [id])
  ownership   Ownership  @relation(fields: [ownershipId], references: [id])

  @@unique([expenseId, ownershipId])
}

model SeasonPrice {
  id          Int      @id @default(autoincrement())
  propertyId  Int
  startDate   DateTime
  endDate     DateTime
  nightlyRate Int
  property    Property @relation(fields: [propertyId], references: [id])
}

model GuestInvite {
  id                   Int        @id @default(autoincrement())
  email                String
  name                 String?
  actionLink           String
  expiresAt            DateTime
  consumedAt           DateTime?
  propertyId           Int?
  invitedByOwnershipId Int?
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  property             Property?  @relation(fields: [propertyId], references: [id])
  invitedByOwnership   Ownership? @relation("OwnershipGuestInvites", fields: [invitedByOwnershipId], references: [id])
}

model Blackout {
  id         Int      @id @default(autoincrement())
  propertyId Int
  startDate  DateTime
  endDate    DateTime
  reason     String?
  property   Property @relation(fields: [propertyId], references: [id])
}

enum ChecklistStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model KnowledgeChecklist {
  id             Int               @id @default(autoincrement())
  title          String
  category       String?
  summary        String?
  status         ChecklistStatus   @default(DRAFT)
  versionCounter Int               @default(1)
  publishedAt    DateTime?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  items          ChecklistItem[]
  versions       ChecklistVersion[]
  documents      ChecklistDocument[]
}

model ChecklistItem {
  id          Int                @id @default(autoincrement())
  checklistId Int
  position    Int
  text        String
  isRequired  Boolean            @default(false)
  notes       String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  checklist   KnowledgeChecklist @relation(fields: [checklistId], references: [id])

  @@index([checklistId, position])
}

model ChecklistVersion {
  id          Int                @id @default(autoincrement())
  checklistId Int
  version     Int
  title       String
  summary     String?
  category    String?
  items       Json
  documents   Json?
  isPublished Boolean            @default(false)
  publishedAt DateTime?
  createdAt   DateTime           @default(now())
  checklist   KnowledgeChecklist @relation(fields: [checklistId], references: [id])

  @@unique([checklistId, version])
}

model KnowledgeDocument {
  id             Int                @id @default(autoincrement())
  title          String
  description    String?
  fileKey        String
  fileUrl        String?
  mimeType       String?
  size           Int?
  version        Int                @default(1)
  uploadedBy     String?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  versions       DocumentVersion[]
  checklistLinks ChecklistDocument[]
}

model DocumentVersion {
  id          Int               @id @default(autoincrement())
  documentId  Int
  version     Int
  fileKey     String
  fileUrl     String?
  mimeType    String?
  size        Int?
  description String?
  createdAt   DateTime          @default(now())
  document    KnowledgeDocument @relation(fields: [documentId], references: [id])

  @@unique([documentId, version])
}

model ChecklistDocument {
  id          Int                @id @default(autoincrement())
  checklistId Int
  documentId  Int
  createdAt   DateTime           @default(now())
  checklist   KnowledgeChecklist @relation(fields: [checklistId], references: [id])
  document    KnowledgeDocument  @relation(fields: [documentId], references: [id])

  @@unique([checklistId, documentId])
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model BlogArticle {
  id              Int           @id @default(autoincrement())
  title           String
  slug            String        @unique
  excerpt         String?
  content         String        @db.Text
  featuredImage   String?
  status          ArticleStatus @default(DRAFT)
  publishedAt     DateTime?
  readingTimeMin  Int?
  authorId        String?       @db.Uuid
  categoryId      Int?
  viewCount       Int           @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  author          User?         @relation(fields: [authorId], references: [id])
  category        BlogCategory? @relation(fields: [categoryId], references: [id])
  tags            ArticleTag[]

  @@index([status, publishedAt])
  @@index([slug])
  @@index([categoryId])
}

model BlogCategory {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  slug        String        @unique
  description String?
  color       String?       @default("#10b981")
  icon        String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  articles    BlogArticle[]
}

model BlogTag {
  id        Int          @id @default(autoincrement())
  name      String       @unique
  slug      String       @unique
  createdAt DateTime     @default(now())
  articles  ArticleTag[]
}

model ArticleTag {
  id        Int         @id @default(autoincrement())
  articleId Int
  tagId     Int
  createdAt DateTime    @default(now())
  article   BlogArticle @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag       BlogTag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([articleId, tagId])
  @@index([articleId])
  @@index([tagId])
}
